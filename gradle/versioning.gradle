def generateVersionCode() {
    def splitVersion = rootProject.file('versioning/version').text.trim().split("\\.")
    def major = splitVersion[0].toInteger()
    def minor = splitVersion[1].toInteger()
    def patch = splitVersion[2].toInteger()
    def buildVersion = rootProject.file('versioning/build').text.trim().toInteger()

    if (major < 0 || major > 99) {
        throw new IllegalArgumentException("major version is very large - are you sure you wanted to set it to this?")
    }
    if (minor < 0 || minor > 99) {
        throw new IllegalArgumentException("minor version is out of range")
    }
    if (patch < 0 || patch > 99) {
        throw new IllegalArgumentException("patch version is out of range")
    }
    if (buildVersion < 0 || buildVersion > 99) {
        throw new IllegalArgumentException("build version is out of range")
    }

    return major * 1_000_000 + minor * 10_000 + patch * 100 + buildVersion
}

def generateVersionName() {
    def splitVersion = rootProject.file('versioning/version').text.trim().split("\\.")
    def major = splitVersion[0].toInteger()
    def minor = splitVersion[1].toInteger()
    def patch = splitVersion[2].toInteger()
    def buildVersion = rootProject.file('versioning/build').text.trim().toInteger()

    if (buildVersion < 25) {
        // 0..24 = Nightly build
        def gitSha = gitSha()
        def gitBranch = gitBranch()
        def nightlyTag = gitTags().find { it.startsWith("nightly-") }
        if (gitBranch == "master" && nightlyTag != null) {
            return "${major}.${minor}.${patch}-${nightlyTag}"
        }
        return "${major}.${minor}.${patch}-${gitBranch}-${gitSha}"
    } else if (buildVersion <= 49) {
        // 24..49 = RC build
        def rc = buildVersion - 24
        return "${major}.${minor}.${patch}-rc${rc}"
    } else if (buildVersion == 50) {
        // 50 = Final build
        return "${major}.${minor}.${patch}"
    } else {
        throw new RuntimeException("Invalid build version: $buildVersion")
    }
}

ext {
    generateVersionCode = this.&generateVersionCode
    generateVersionName = this.&generateVersionName
}

def gitSha() {
    def cmd = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    cmd.waitFor()
    if (cmd.exitValue() != 0) {
        throw new RuntimeException(cmd.errorStream.text)
    }

    return cmd.text.trim()
}

def gitBranch() {
    def cmd = 'git rev-parse --abbrev-ref HEAD'.execute([], project.rootDir)
    cmd.waitFor()
    if (cmd.exitValue() != 0) {
        throw new RuntimeException(cmd.errorStream.text)
    }

    return cmd.text.trim()
}

def gitTags() {
    def cmd = 'git tag --points-at HEAD'.execute([], project.rootDir)
    cmd.waitFor()
    if (cmd.exitValue() != 0) {
        throw new RuntimeException(cmd.errorStream.text)
    }

    return cmd.text.trim().split('\n')
}
